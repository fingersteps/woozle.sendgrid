<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Woozle</name>
    </assembly>
    <members>
        <member name="M:Woozle.Domain.Fields.AbstractPlaceHolderResolver`1.ResolveAllPlaceHolders(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Resolves all found placeHolders in the given text. Calls <see cref="M:Woozle.Domain.Fields.AbstractPlaceHolderResolver`1.GetPlaceHolderText(`0,Woozle.Model.SessionHandling.SessionData)"/> to resolve the specific placeholders.
            </summary>
            <param name="text"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Fields.ITextFieldLogic.GetTextFields(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all text fields of the specific mandator.
            </summary>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>A list of <see cref="T:Woozle.Domain.Fields.TextFieldSearchResult"/></returns>
        </member>
        <member name="M:Woozle.Domain.Fields.ITextFieldLogic.GetTextField(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets a specific text field.
            </summary>
            <param name="name">The name of the text field.</param>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>The <see cref="T:Woozle.Domain.Fields.TextFieldSearchResult"/></returns>
        </member>
        <member name="M:Woozle.Domain.Fields.TextFieldLogic.GetTextFields(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Fields.ITextFieldLogic.GetTextFields(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Numerator.INumberProvider.GetNextNumber(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets a number from a <see cref="T:Woozle.Model.NumberRange"/> of the number range name
            </summary>
            <param name="numberRangeName"></param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns>The new number as a string</returns>
        </member>
        <member name="M:Woozle.Domain.Numerator.INumberProvider.GetNextNumber(System.String,System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets a number from a <see cref="T:Woozle.Model.NumberRange"/> of the number range name in a specified format.
            </summary>
            <param name="numberRangeName"></param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <param name="format">The specified format.</param>
            <returns>The new number as a string</returns>
        </member>
        <member name="M:Woozle.Domain.PasswordChange.IPasswordChangeLogic.ChangePassword(Woozle.Model.User,System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Changes the password of a specific user.
            </summary>
            <param name="user">The specific user.</param>
            <param name="newPassword">New password</param>
            <param name="sessionData">The current <see cref="T:Woozle.Model.SessionHandling.SessionData">Session</see></param>
            <returns>true, if the password was successfully changed.</returns>
        </member>
        <member name="M:Woozle.Domain.PasswordChange.IPasswordChangeLogic.ChangePassword(System.String,System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Changes the password of the current logged on user.
            </summary>
            <param name="newPassword">The new passsword.</param>
            <param name="oldPassword">The old password.</param>
            <param name="sessionData">The current <see cref="T:Woozle.Model.SessionHandling.SessionData">Session</see></param>
            <returns>true, if the password was successfully changed.</returns>
        </member>
        <member name="M:Woozle.Domain.PasswordRequest.IPasswordGenerator.GetRandomPassword">
            <summary>
            Generates a random password.
            </summary>
            <returns>A random password.</returns>
        </member>
        <member name="M:Woozle.Domain.PasswordRequest.IPasswordRequestLogic.RequestNewPassword(System.String,System.String,System.String,System.String,Woozle.Model.SessionHandling.SessionData,System.Func{System.String,System.String,Woozle.Model.SessionHandling.SessionData,System.String})">
            <summary>
            Requests the new password.
            </summary>
            <param name="ipAdress">The ip of the callee.</param>
            <param name="username">The requested username</param>
            <param name="text">The text for sending the new password.</param>
            <param name="title">The title of the message for the new password.</param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <param name="getEmailText">Callback for resolving parameters of the email text with the new password.</param>
            <returns></returns>
        </member>
        <member name="P:Woozle.Domain.PasswordRequest.IPasswordRequestLogic.Credentials">
            <summary>
            Credentials for the external communication system (e.g. an email system)
            </summary>
        </member>
        <member name="M:Woozle.Domain.PasswordRequest.IPasswordRequestValidator.CanRequestPassword(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Checks wheter the callee can request the new password.
            </summary>
            <param name="ip">The ip of the callee.</param>
            <param name="sessionData">The <see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>True, if the calle can request for a new password.</returns>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.Mail.IExternalMailSystem">
            <summary>
            Definition for an external system which is able to perform EMail related stuff.
            </summary>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.IExternalSystem">
            <summary>
            Marker interface for an external system
            </summary>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.Mail.IExternalMailSystem.SendEMail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an EMail to a desired destination address
            </summary>
            <param name="fromName"> </param>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <param name="subject"> </param>
            <param name="text"></param>
        </member>
        <member name="P:Woozle.Domain.ExternalSystem.Mail.IExternalMailSystem.Credentials">
            <summary>
            Credentials for the specific email system.
            </summary>
        </member>
        <member name="M:Woozle.Domain.Registration.IRegistrationLogic.RegisterUser(Woozle.Model.User,System.String)">
            <summary>
            Registers a new user
            </summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserValidator.ValidateNewUser(System.String,System.String)">
            <summary>
            Validates a new User
            </summary>
            <param name="username"></param>
            <param name="email"></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserValidator.ValidateUserPassword(System.String)">
            <summary>
            Validates the given password of a user
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Woozle.Domain.UserProfile.IMyProfileLogic.Update(System.String,System.Int32,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Updates the users profile acc. to the given arguments
            </summary>
            <param name="email"></param>
            <param name="languageId"></param>
            <param name="sessionData"></param>
        </member>
        <member name="P:Woozle.Host.WoozleDefaults.DefaultMandatorName">
            <summary>
            The default mandator name used in Woozle when no mandator is necessary (for example in public web services or in user registration)
            </summary>
        </member>
        <member name="P:Woozle.Host.WoozleDefaults.DefaultLanguageCode">
            <summary>
            The default language code which is used when no language is set (e.g. "de" or "en)
            </summary>
        </member>
        <member name="T:Woozle.Services.AbstractService">
            <summary>
            Abstract service implementation
            </summary>
        </member>
        <member name="P:Woozle.Services.AbstractService.Session">
            <summary>
            <see cref="P:Woozle.Services.AbstractService.Session">Session </see> for authorisation
            </summary>
        </member>
        <member name="M:Woozle.Services.Registration.RegistrationService.Post(Woozle.Services.Registration.Registration)">
            <summary>
            Create new Registration
            </summary>
        </member>
        <member name="T:Woozle.Services.Registration.WoozleRegistrationFeature">
            <summary>
            This Feature is a Woozle specific extension of ServiceStacks built in Registration feature.
            </summary>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.ExternalSystemAttribute">
            <summary>
            Attribute for tagging an external system with metadata.
            <remarks>
            With this attribute an external system could be named and versioned.
            </remarks>
            </summary>
        </member>
        <member name="P:Woozle.Domain.ExternalSystem.ExternalSystemAttribute.Name">
            <summary>
            The name of the external system
            </summary>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1">
            <summary>
            Facade for getting a specific instance {T} from an external service.
            </summary>
            <remarks>
            The external system facade implements the <see cref="T:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacade`1"/>
            </remarks>
            <typeparam name="T">Type of the external service which is implementing <see cref="T:Woozle.Domain.ExternalSystem.IExternalSystem"/></typeparam>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacade`1">
            <summary>
            Interface for an external system facade.
            The external system facade is an component which is searching dynamically for 
            specific external systems.
            </summary>
            <typeparam name="T">Type of the target external system</typeparam>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacade`1.GetExternalSystem(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Get the external system.
            </summary>
            <remarks>
            The external system facade is looking for a specific external system.
            The target external system will be loaded dynamically and with a lazy mechnism.
            </remarks>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>An instance of the external system (wrapper)</returns>
        </member>
        <member name="F:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.externalServiceRepository">
            <summary>
            <see cref="T:Woozle.Persistence.IExternalSystemRepository"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.#ctor(Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacadeFactory,Woozle.Persistence.IExternalSystemRepository,System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.String)">
            <summary>
            ctor.
            </summary>
            <param name="externalSystemFacadeFactory">A factory to create external system facades 
            (used to let the external systems communicate with each other)</param>
            <param name="externalServiceRepository"><see cref="T:Woozle.Persistence.IExternalSystemRepository"/></param>
            <param name="catalog"> <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> </param>
            <param name="systemType">The external system type name which is used to lookup external systems in the database.</param>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.GetExternalSystem(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacade`1.GetExternalSystem(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.FindExternalSystem(Woozle.Model.ExternalSystem)">
            <summary>
            Gets an instance of the target external service.
            </summary>
            <remarks>
            This method is looking for an instance of the target external system in the ExternalSystems property,
            which will be loaded via MEF.
            </remarks>
            <param name="externalService">
            <see cref="T:Woozle.Model.ExternalSystem">The external system domain object, which holds all needed information about the target external system</see>
            </param>
            <returns>A specific instance of the target external system</returns>
        </member>
        <member name="P:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.SystemType">
            <summary>
            The system tpye for all external systems in the external system facade
            </summary>
        </member>
        <member name="P:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.ExternalSystems">
            <summary>
            Imported external systems which have an <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> 
            and are tagged with an <see cref="T:Woozle.Domain.ExternalSystem.IExternalSystemMetadata"/> Attribute.
            All imported external systems are loaded with the <see cref="T:System.Lazy`1"/> which allows the external
            system lazy loaded.
            </summary>
        </member>
        <member name="P:Woozle.Domain.ExternalSystem.ExternalSystemFacade.ExternalSystemFacade`1.ExternalSystemFacadeFactory">
            <summary>
            A factory to create ExternalSystemFacade instances. 
            This allows each external system to communicate with other desired external systems.
            </summary>
        </member>
        <member name="T:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacadeFactory">
            <summary>
            Definition of an factory which creates instances of <see cref="T:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacade`1"/>.
            </summary>
        </member>
        <member name="M:Woozle.Domain.ExternalSystem.ExternalSystemFacade.IExternalSystemFacadeFactory.GetExternalSystemFacade``1">
            <summary>
            Gets an external system facade for the given type.
            </summary>
            <typeparam name="T">An external system <see cref="T:Woozle.Domain.ExternalSystem.IExternalSystem"/></typeparam>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.StatusFields.IStatusFieldLogic.LoadStatusByValue(System.String)">
            <summary>
            Loads a Status record by its value.
            </summary>
            <param name="statusValue"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Dependencies.WoozlePlugin">
            <summary>
            Register all dependencies for running Woozle (Core)
            </summary>
        </member>
        <member name="M:Woozle.Dependencies.WoozlePlugin.ConfigureDefaultMandator(Funq.Container)">
            <summary>
            The configured default mandator and languagewill be used as default for all public services (where no authentification is needed).
            </summary>
        </member>
        <member name="T:Woozle.Domain.Authentication.AuthenticationLogic">
            <summary>
            Contains authentication related logic.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Woozle.Domain.Authentication.IAuthenticationLogic">
            <summary>
            Authentication businesslogic.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.IAuthenticationLogic.Login(Woozle.Model.Authentication.LoginRequest)">
            <summary>
            Performs the login.
            </summary>
            <param name="loginRequest">The login request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.IAuthenticationLogic.LoginMandator(System.String,Woozle.Model.Mandator)">
            <summary>
            Logins the already authenticated userd to a specific mandator
            </summary>
            <param name="username"></param>
            <param name="mandator"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authentication.IAuthenticationLogic.GetLoginUser(System.String)">
            <summary>
            Gets the login user.
            </summary>
            <param name="username">The username.</param>
            <returns>The <see cref="T:Woozle.Model.UserSearch.UserSearchForLoginResult"/></returns>
        </member>
        <member name="F:Woozle.Domain.Authentication.AuthenticationLogic.userRepository">
            <summary>
            <see cref="T:Woozle.Persistence.IUserRepository"/>
            </summary>
        </member>
        <member name="F:Woozle.Domain.Authentication.AuthenticationLogic.unitOfWork">
            <summary>
            <see cref="T:Woozle.Persistence.IUnitOfWork"/>
            </summary>
        </member>
        <member name="F:Woozle.Domain.Authentication.AuthenticationLogic.passwordHasher">
            <summary>
            <see cref="T:ServiceStack.ServiceInterface.Auth.IHashProvider"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.#ctor(Woozle.Persistence.IUserRepository,Woozle.Persistence.Ef.IEfUnitOfWork,ServiceStack.ServiceInterface.Auth.IHashProvider)">
            <summary>
            ctor.
            </summary>
            <param name="userRepository"><see cref="T:Woozle.Persistence.IUserRepository"/></param>
            <param name="unitOfWork"><see cref="T:Woozle.Persistence.IUnitOfWork"/></param>
            <param name="passwordHasher"></param>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.Login(Woozle.Model.Authentication.LoginRequest)">
            <summary>
            Performs the login with the given request information.
            </summary>
            <param name="loginRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.GetLoginUser(System.String)">
            <summary>
            Gets the login user.
            </summary>
            <param name="username">The username.</param>
            <returns>The <see cref="T:Woozle.Model.UserSearch.UserSearchForLoginResult"/></returns>
        </member>
        <member name="T:Woozle.Domain.Authentication.InvalidLoginException">
            <summary>
            Exception if the user won't be found.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.InvalidLoginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Woozle.Domain.Authentication.InvalidLoginException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <remarks></remarks>
        </member>
        <member name="T:Woozle.Domain.Authority.GetRolesLogic">
            <summary>
            Logic for searching <see cref="T:Woozle.Model.Role">roles</see>
            </summary>
        </member>
        <member name="T:Woozle.Domain.Authority.IGetRolesLogic">
            <summary>
            Logic for searchig <see cref="T:Woozle.Model.Role">roles</see>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.IGetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets a list of assigned <see cref="T:Woozle.Model.MandatorRole"/> of an <see cref="T:Woozle.Model.Mandator"/>
            </summary>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.IGetRolesLogic.GetMandatorRolesForMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all mandatorRoles for the mandator of the given session.
            </summary>
            <param name="sessionData"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.IGetRolesLogic.GetMandatorRoleByName(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets a specific mandator role by the given role name.
            </summary>
            <param name="roleName"></param>
            <param name="sessionData"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Woozle.Domain.Authority.IGetRolesLogic.GetUserRoles(Woozle.Model.SessionHandling.SessionData)" -->
        <member name="M:Woozle.Domain.Authority.GetRolesLogic.#ctor(Woozle.Persistence.IRepository{Woozle.Model.MandatorRole},Woozle.Persistence.IRepository{Woozle.Model.UserMandatorRole})">
            <summary>
            ctor.
            </summary>
            <see cref="T:Woozle.Persistence.IRepository`1">Repository for getting the role navigation property of the <see cref="T:Woozle.Model.Mandator"/>.</see>
        </member>
        <member name="M:Woozle.Domain.Authority.GetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Authority.IGetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.GetRolesLogic.GetUserRoles(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Authority.IGetRolesLogic.GetUserRoles(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.IPermissionsLogic.SaveChangedPermissions(Woozle.Model.Role,System.Collections.Generic.List{Woozle.Model.ModulePermissions.ChangedModulePermission},Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Persists the given changed permissions to database.
            </summary>
            <param name="role"></param>
            <param name="changedPermissions"></param>
            <param name="sessionData"></param>
        </member>
        <member name="M:Woozle.Domain.Authority.IPermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets the assigned <see cref="T:Woozle.Model.FunctionPermission"/> for the logged in <see cref="T:Woozle.Model.User"/>
            </summary>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns>A list of <see cref="T:Woozle.Model.FunctionPermission"/></returns>
        </member>
        <member name="T:Woozle.Domain.PermissionManagement.IPermissionProvider">
            <summary>
            Dataprovider for permissions.
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.IPermissionProvider.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all permission of the user of a <see cref="T:Woozle.Model.SessionHandling.Session"/>.
            </summary>
            <param name="session">The current <see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>A list of <see cref="T:Woozle.Model.FunctionPermission"/> of the <see cref="T:Woozle.Model.User"/> from the <see cref="T:Woozle.Model.SessionHandling.Session"/></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.PermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Authority.IPermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.#ctor(Woozle.Persistence.IRepository{Woozle.Model.City},Woozle.Persistence.IRepository{Woozle.Model.Country},Woozle.Persistence.IRepository{Woozle.Model.Language})">
            <summary>
            ctor.
            </summary>
            <param name="cityRepository"></param>
            <param name="countryRepository"></param>
            <param name="languageRepository"></param>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetCities(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetCities(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetCountries(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetCountries(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetLanguages(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetLanguages(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.ModuleManagement.IModuleLogic">
            <summary>
            Definition of the module management functionalities.
            </summary>
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.IModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all modules by given mandator
            </summary>
            <param name="sessionData">The session</param>
            <returns>All Modules of the mandator</returns>
            
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.IModuleLogic.FindModulePermissions(Woozle.Model.Role,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all permissions of modules/functions acc. the mandant of the given session.
            </summary>
            <param name="role"> </param>
            <param name="sessionData"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Domain.ModuleManagement.ModuleLogic">
            <summary>
            Contains the logic to manage modules.
            </summary>
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.ModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.ModuleManagement.IModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.PermissionManagement.IPermissionManager">
            <summary>
            Interface for an permissionmanager.
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.IPermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)">
            <summary>
            Returns true, if the user of the <see cref="T:Woozle.Model.SessionHandling.Session"/> has the specified permission.
            </summary>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <param name="functionLogicalId">The logical id of the function</param>
            <param name="permissionId">The logical id of the permission</param>
            <returns>True, if the user of the <see cref="T:Woozle.Model.SessionHandling.Session"/> has the specified permission</returns>
        </member>
        <member name="F:Woozle.Domain.PermissionManagement.PermissionManager.permissionProvider">
            <summary>
            <see cref="T:Woozle.Domain.PermissionManagement.IPermissionProvider"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.PermissionManager.#ctor(Woozle.Domain.PermissionManagement.IPermissionProvider)">
            <summary>
            ctor.
            </summary>
            <param name="provider"><see cref="T:Woozle.Domain.PermissionManagement.IPermissionProvider"/></param>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.PermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)">
            <summary>
            <see cref="M:Woozle.Domain.PermissionManagement.IPermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.PersonManagement.IPersonLogic.SearchForExistingPerson(Woozle.Model.Person,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Checks if the given person is already existing in the database. If so, the existing person will be used for the further steps.
            </summary>
            <param name="person"></param>
            <param name="sessionData"></param>
            <returns>A found person or the same person which was given as parameter when there was no matching person found.</returns>
        </member>
        <member name="T:Woozle.Domain.Settings.ISettingsLogic">
            <summary>
            Settings related logic
            </summary>
        </member>
        <member name="M:Woozle.Domain.Settings.ISettingsLogic.Load(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Loads a specific <see cref="T:Woozle.Model.Setting"/>
            </summary>
            <param name="sessionData">The session</param>
            <returns>The loaded <see cref="T:Woozle.Model.Setting"/></returns>
        </member>
        <member name="M:Woozle.Domain.Settings.ISettingsLogic.Save(Woozle.Model.Setting,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Saves a specific <see cref="T:Woozle.Model.Setting"/>
            </summary>
            <param name="saveableObject">The <see cref="T:Woozle.Model.Setting"/> to save.</param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns>The result of the save process as <see cref="T:Woozle.Model.Validation.Creation.ISaveResult`1"/></returns>
        </member>
        <member name="T:Woozle.Domain.UserManagement.Constants">
            <summary>
            Holds Constants which can be used anywhere in the solution.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.Constants.LogicalIdSearchUserV1">
            <summary>
            Logical id of the search user view.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.Constants.LogicalIdDetailUserV1">
            <summary>
            Logical id of the detail user view.
            </summary>
        </member>
        <member name="T:Woozle.Domain.UserManagement.IUserLogic">
            <summary>
            Definition of a UserLogic.
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Searchs users by given criteria.
            </summary>
            <param name="criteriaUser">The user criteria</param>
            <param name="sessionData">The session</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Save(Woozle.Model.User,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Saves the specified user.
            </summary>
            <param name="user"><see cref="T:Woozle.Model.User"/></param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns><see cref="T:Woozle.Model.User"/>.</returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Delete(System.Int32,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Deletes the specific user.
            </summary>
            <param name="id"><see cref="T:Woozle.Model.User"/></param>
            <param name="sessionData"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.LoadUser(System.Int32,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Loads a user by the given id.
            </summary>
            <param name="id"></param>
            <param name="sessionData"></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.GetUsersOfMandator(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all users of the current mandator
            </summary>
            <param name="sessionData"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.FindUserById(System.Int32)">
            <summary>
            Gets the user of the given id or null if no user was found.
            </summary>
            <param name="parse"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.GetUserByUsername(System.String,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets the user by the given username or null if no user was found.
            </summary>
            <param name="username"></param>
            <param name="sessionData"></param>
        </member>
        <member name="T:Woozle.Domain.UserManagement.UserLogic">
            <summary>
            The implementation for the UserLogic.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.UserLogic.repository">
            <summary>
            <see cref="T:Woozle.Persistence.IUserRepository"/>
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.UserLogic.permissionManager">
            <summary>
            <see cref="T:Woozle.Domain.PermissionManagement.IPermissionManager"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.#ctor(Woozle.Persistence.IUserRepository,Woozle.Domain.PermissionManagement.IPermissionManager)">
            <summary>
            ctor.
            </summary>
            <param name="repository"><see cref="T:Woozle.Persistence.IRepository`1"/></param>
            <param name="permissionManager"><see cref="T:Woozle.Domain.PermissionManagement.IPermissionManager"/></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.UserManagement.IUserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.Save(Woozle.Model.User,Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Saves the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="sessionData">The required session.</param>
            <returns><see cref="T:Woozle.Model.User"/></returns>
        </member>
        <member name="T:Woozle.Host.WoozleHost">
            <summary>
            HTTP Serverhost based on <see cref="T:ServiceStack.WebHost.Endpoints.AppHostHttpListenerBase"/>
            </summary>
        </member>
        <member name="M:Woozle.Host.WoozleHost.#ctor(Woozle.Host.WoozleDefaults,System.String,System.Reflection.Assembly[])">
            <summary>
            Initializes a new <see cref="T:Woozle.Host.WoozleHost"/>
            </summary>
            <param name="defaults">Default values for this host</param>
            <param name="serviceName">The name of the service</param>
            <param name="assemblies">The assemblies which contain services</param>
        </member>
        <member name="M:Woozle.Host.WoozleHost.#ctor(System.String,System.Reflection.Assembly[])">
            <summary>
            Initializes a new <see cref="T:Woozle.Host.WoozleHost"/>
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="assemblies">The assemblies which contain services</param>
        </member>
        <member name="M:Woozle.Host.WoozleHost.Configure(Funq.Container)">
            <summary>
            Configures the host.
            </summary>
            <remarks>
             - Adds the <see cref="T:ServiceStack.ServiceInterface.SessionFeature"/>
             - Adds the <see cref="T:ServiceStack.ServiceInterface.AuthFeature"/> with the <see cref="T:Woozle.Services.Authentication.WoozleCredentialsAuthProvider"/>
             - Adds the <see cref="T:Woozle.Dependencies.WoozlePlugin"/>
            </remarks>
            <param name="container">The IoC-Container</param>
        </member>
        <member name="M:Woozle.Host.WoozleHost.ConfigureDefaultScope(Funq.Container)">
            <summary>
            Sets the default reuse scope for the IoC container, which takes effect for all default dependency injection bindings.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Woozle.Services.Authentication.LoginContextService.Get(Woozle.Services.Authentication.LoginContext)">
            <summary>
            Gets the context of the user which is logged in to this Session (User and Mandator)
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.Authentication.MandatorAuthenticateAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            requires authentication.
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.MandatorAuthenticateAttribute.#ctor">
            <summary>
            Initialize a new <see cref="T:Woozle.Services.Authentication.MandatorAuthenticateAttribute"/>
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.MandatorSelectionService.#ctor(Woozle.Domain.Authentication.IAuthenticationLogic)">
            <summary>
            ctor.
            </summary>
            <param name="authenticationLogic"><see cref="T:Woozle.Domain.Authentication.IAuthenticationLogic"/></param>
        </member>
        <member name="M:Woozle.Services.Authentication.MandatorSelectionService.Get(Woozle.Services.Mandator.MandatorsForSelection)">
            <summary>
            Gets the mandators of the currently logged in user
            </summary>
            <param name="mandators"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.Authentication.WoozleCredentialsAuthProvider">
            <summary>
            Specific provider for authentication
            </summary>
        </member>
        <member name="F:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.sessionData">
            <summary>
            <see cref="T:Woozle.Model.SessionHandling.SessionData"/>
            </summary>
        </member>
        <member name="F:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.container">
            <summary>
            <see cref="T:Funq.Container">IoC-Container</see>
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.#ctor(Funq.Container)">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.TryAuthenticate(ServiceStack.ServiceInterface.IServiceBase,System.String,System.String)">
            <summary>
            <see cref="M:ServiceStack.ServiceInterface.Auth.CredentialsAuthProvider.TryAuthenticate(ServiceStack.ServiceInterface.IServiceBase,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Woozle.Services.Authority.MandatorRoleService.Get(Woozle.Services.Authority.MandatorRoles)">
            <summary>
            Get all MandatorRoles of the current session
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.MandatorRoleService.Get(Woozle.Services.Authority.MandatorRolesForDropDown)">
            <summary>
            Get all MandatorRoles of the current session used for drop down menus
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.PermissionService.Get(Woozle.Services.Authority.Permissions)">
            <summary>
            Get all FunctionPermissions of the current session
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.PermissionService.Put(Woozle.Services.Authority.SavePermissions)">
            <summary>
            Updates all given permissions for the given role
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.RoleService.Get(Woozle.Services.Authority.RoleModulePermissions)">
            <summary>
            Get all ModulePermissions of the given role
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.ExceptionCatcher">
            <summary>
            Catches all exceptions and parse them into user friendli ServiceExceptions, which gets sent to the Client
            </summary>
        </member>
        <member name="P:Woozle.Services.Fields.Status.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="P:Woozle.Services.Location.Country.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.Location.LanguageService.Get(Woozle.Services.Location.Languages)">
            <summary>
            Gets all languages
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:Woozle.Services.Location.Message.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.Mandator.MandatorService.Get(Woozle.Services.Mandator.Mandator)">
            <summary>
            Gets the mandator of the currently logged in user
            </summary>
            <param name="mandator"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Mandator.MandatorService.Put(Woozle.Services.Mandator.Mandator)">
            <summary>
            Updates the given mandator
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.MappingConfiguration">
            <summary>
            Mapping configuration betweeen Dto's and Model objects
            </summary>
        </member>
        <member name="M:Woozle.Services.Modules.ModuleService.Get(Woozle.Services.Modules.Modules)">
            <summary>
            Gets all modules of the mandator of the currently logged in user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Navigation.NavigationService.Get(Woozle.Services.Navigation.Navigation)">
            <summary>
            Gets all modules of the mandator of the currently logged in user
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.SaveResultDto`1">
            <summary>
            Result class for each service operation between client and server.
            </summary>
            <typeparam name="T">Type of the service entity</typeparam>
        </member>
        <member name="M:Woozle.Services.SaveResultDto`1.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.TargetObject">
            <summary>
            Target entity
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.HasErrors">
            <summary>
            Flag, which indicates if there is an error.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.HasSystemErrors">
            <summary>
            Flag, which indicactes if there is a system error.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.Errors">
            <summary>
            A list with <see cref="T:Woozle.Model.Validation.Error">errors</see>
            </summary>
        </member>
        <member name="P:Woozle.Services.Modules.Function.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="P:Woozle.Services.Modules.Module.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.UserProfile.MyProfileService.Put(Woozle.Services.UserProfile.MyProfileData)">
            <summary>
            Updates the given profile data
            </summary>
            <param name="changedProfileData"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserProfile.MyProfileService.Put(Woozle.Services.UserProfile.ChangeMyPasswordData)">
            <summary>
            Changes the password of the logged in user acc. to the given new password
            </summary>
            <param name="changedProfileData"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Get(Woozle.Model.Setting)">
            <summary>
            Gets one specific Settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Post(Woozle.Model.Setting)">
            <summary>
            Inserts a given object
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Put(Woozle.Model.Setting)">
            <summary>
            Updates a given object
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Get(Woozle.Services.UserManagement.UsersForDropDownDto)">
            <summary>
            Gets all users of the mandator of the currently logged in user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Post(Woozle.Services.UserManagement.User)">
            <summary>
            Inserts a given object
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Put(Woozle.Services.UserManagement.User)">
            <summary>
            Updates a given object
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Settings.IWoozleSettings">
            <summary>
            Holds all global settings configured in your Woozle Application.
            </summary>
        </member>
        <member name="P:Woozle.Settings.IWoozleSettings.DefaultMandator">
            <summary>
            Returns the configured default mandator for your Woozle Application or null if no default mandator was configured or no mandator was found with the given name.
            </summary>
        </member>
    </members>
</doc>
